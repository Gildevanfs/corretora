// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                 Int       @id @default(autoincrement())
  des_name_cpn       String
  is_active_cpn      Boolean   @default(true)
  hra_created_at_cpn DateTime  @default(now())
  hra_updated_at_cpn DateTime? @updatedAt

  stocks Stock[]

  @@map("tb_companies")
}

model Stock {
  id                    Int       @id @default(autoincrement())
  des_stock_name_stk    String
  id_company_stk        Int
  num_quantity_stk      Int
  vlr_initial_price_stk Decimal
  is_available_stk      Boolean   @default(true)
  hra_created_at_stk    DateTime  @default(now())
  hra_updated_at_stk    DateTime? @updatedAt

  company      Company       @relation(fields: [id_company_stk], references: [id], onDelete: Cascade)
  sellOffers   SellOffer[]
  buyOffers    BuyOffer[]
  transactions Transaction[]

  @@map("tb_stocks")
}

model User {
  id                 Int       @id @default(autoincrement())
  des_name_usr       String
  des_email_usr      String    @unique
  vlr_balance_usr    Decimal   @default(0.00)
  is_active_usr      Boolean   @default(true)
  hra_created_at_usr DateTime  @default(now())
  hra_updated_at_usr DateTime? @updatedAt

  sellOffers SellOffer[]
  buyOffers  BuyOffer[]

  @@map("tb_users")
}

model SellOffer {
  id                 Int       @id @default(autoincrement())
  id_user_slf        Int
  id_stock_slf       Int
  vlr_price_slf      Decimal
  num_quantity_slf   Int
  hra_created_at_slf DateTime  @default(now())
  hra_updated_at_slf DateTime? @updatedAt

  user         User          @relation(fields: [id_user_slf], references: [id], onDelete: Cascade)
  stock        Stock         @relation(fields: [id_stock_slf], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("tb_sell_offers")
}

model BuyOffer {
  id                 Int       @id @default(autoincrement())
  id_user_bfs        Int
  id_stock_bfs       Int
  vlr_price_bfs      Decimal
  num_quantity_bfs   Int
  hra_created_at_bfs DateTime  @default(now())
  hra_updated_at_bfs DateTime? @updatedAt

  user         User          @relation(fields: [id_user_bfs], references: [id], onDelete: Cascade)
  stock        Stock         @relation(fields: [id_stock_bfs], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("tb_buy_offers")
}

model Transaction {
  id                 Int       @id @default(autoincrement())
  id_sell_offers_tsc Int
  id_buy_offers_tsc  Int
  id_stock_tsc       Int
  vlr_price_tsc      Decimal
  num_quantity_tsc   Int
  hra_created_at_tsc DateTime  @default(now())
  hra_updated_at_tsc DateTime? @updatedAt

  sellOffer SellOffer @relation(fields: [id_sell_offers_tsc], references: [id], onDelete: Cascade)
  buyOffer  BuyOffer  @relation(fields: [id_buy_offers_tsc], references: [id], onDelete: Cascade)
  stock     Stock     @relation(fields: [id_stock_tsc], references: [id], onDelete: Cascade)

  @@map("tb_transactions")
}
